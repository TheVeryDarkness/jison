"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BnfLexer = exports.BnfParser = void 0;
const parser_1 = require("@ts-jison/parser");
/**
 * parser generated by  @ts-jison/parser-generator 0.4.1-alpha.2
 * @returns Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */
// import {transform} from './ebnf-parser';
const transform = require('../ebnf-transform').transform;
let ebnf = false;
// transform ebnf to bnf if necessary
function extend(json, grammar) {
    json.bnf = ebnf ? transform(grammar) : grammar;
    return json;
}
class BnfParser extends parser_1.JisonParser {
    constructor(yy = {}, lexer = new BnfLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = { "error": 2, "spec": 3, "declaration_list": 4, "%%": 5, "grammar": 6, "optional_end_block": 7, "EOF": 8, "CODE": 9, "declaration": 10, "START": 11, "id": 12, "LEX_BLOCK": 13, "operator": 14, "ACTION": 15, "parse_param": 16, "options": 17, "type": 18, "OPTIONS": 19, "token_list": 20, "TYPES": 21, "PARSE_PARAM": 22, "associativity": 23, "LEFT": 24, "RIGHT": 25, "NONASSOC": 26, "symbol": 27, "production_list": 28, "production": 29, ":": 30, "handle_list": 31, ";": 32, "|": 33, "handle_action": 34, "handle": 35, "prec": 36, "action": 37, "expression_suffix": 38, "handle_sublist": 39, "expression": 40, "suffix": 41, "ALIAS": 42, "ID": 43, "STRING": 44, "(": 45, ")": 46, "*": 47, "?": 48, "+": 49, "PREC": 50, "{": 51, "action_body": 52, "}": 53, "ARROW_ACTION": 54, "action_comments_body": 55, "ACTION_BODY": 56, "$accept": 0, "$end": 1 };
        this.terminals_ = { 2: "error", 5: "%%", 8: "EOF", 9: "CODE", 11: "START", 13: "LEX_BLOCK", 15: "ACTION", 19: "OPTIONS", 21: "TYPES", 22: "PARSE_PARAM", 24: "LEFT", 25: "RIGHT", 26: "NONASSOC", 30: ":", 32: ";", 33: "|", 42: "ALIAS", 43: "ID", 44: "STRING", 45: "(", 46: ")", 47: "*", 48: "?", 49: "+", 50: "PREC", 51: "{", 53: "}", 54: "ARROW_ACTION", 56: "ACTION_BODY" };
        this.productions_ = [0, [3, 5], [3, 6], [7, 0], [7, 1], [4, 2], [4, 0], [10, 2], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [10, 1], [17, 2], [18, 2], [16, 2], [14, 2], [23, 1], [23, 1], [23, 1], [20, 2], [20, 1], [6, 1], [28, 2], [28, 1], [29, 4], [31, 3], [31, 1], [34, 3], [35, 2], [35, 0], [39, 3], [39, 1], [38, 3], [38, 2], [40, 1], [40, 1], [40, 3], [41, 0], [41, 1], [41, 1], [41, 1], [36, 2], [36, 0], [27, 1], [27, 1], [12, 1], [37, 3], [37, 1], [37, 1], [37, 0], [52, 0], [52, 1], [52, 5], [52, 4], [55, 1], [55, 2]];
        this.defaultActions = { 37: [2, 1], 42: [2, 2] };
        // shorten static method to just `o` for terse STATE_TABLE
        const $V0 = [5, 11, 13, 15, 19, 21, 22, 24, 25, 26], $V1 = [1, 23], $V2 = [1, 28], $V3 = [43, 44], $V4 = [5, 8, 43], $V5 = [5, 11, 13, 15, 19, 21, 22, 24, 25, 26, 43, 44], $V6 = [5, 11, 13, 15, 19, 21, 22, 24, 25, 26, 32, 33, 43, 44, 51, 54], $V7 = [15, 32, 33, 43, 44, 45, 50, 51, 54], $V8 = [2, 31], $V9 = [32, 33], $Va = [15, 32, 33, 51, 54], $Vb = [1, 49], $Vc = [1, 50], $Vd = [1, 51], $Ve = [15, 32, 33, 43, 44, 45, 46, 50, 51, 54], $Vf = [15, 32, 33, 42, 43, 44, 45, 46, 50, 51, 54], $Vg = [15, 32, 33, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54], $Vh = [33, 43, 44, 45, 46], $Vi = [51, 53], $Vj = [2, 52], $Vk = [1, 66], $Vl = [33, 46], $Vm = [1, 71], $Vn = [1, 72], $Vo = [51, 53, 56];
        const o = parser_1.JisonParser.expandParseTable;
        this.table = [o($V0, [2, 6], { 3: 1, 4: 2 }), { 1: [3] }, { 5: [1, 3], 10: 4, 11: [1, 5], 13: [1, 6], 14: 7, 15: [1, 8], 16: 9, 17: 10, 18: 11, 19: [1, 14], 21: [1, 15], 22: [1, 13], 23: 12, 24: [1, 16], 25: [1, 17], 26: [1, 18] }, { 6: 19, 12: 22, 28: 20, 29: 21, 43: $V1 }, o($V0, [2, 5]), { 12: 24, 43: $V1 }, o($V0, [2, 8]), o($V0, [2, 9]), o($V0, [2, 10]), o($V0, [2, 11]), o($V0, [2, 12]), o($V0, [2, 13]), { 12: 27, 20: 25, 27: 26, 43: $V1, 44: $V2 }, { 12: 27, 20: 29, 27: 26, 43: $V1, 44: $V2 }, { 12: 27, 20: 30, 27: 26, 43: $V1, 44: $V2 }, { 12: 27, 20: 31, 27: 26, 43: $V1, 44: $V2 }, o($V3, [2, 18]), o($V3, [2, 19]), o($V3, [2, 20]), { 5: [1, 33], 7: 32, 8: [2, 3] }, o([5, 8], [2, 23], { 12: 22, 29: 34, 43: $V1 }), o($V4, [2, 25]), { 30: [1, 35] }, o([5, 11, 13, 15, 19, 21, 22, 24, 25, 26, 30, 32, 33, 43, 44, 51, 54], [2, 47]), o($V0, [2, 7]), o($V0, [2, 17], { 12: 27, 27: 36, 43: $V1, 44: $V2 }), o($V5, [2, 22]), o($V6, [2, 45]), o($V6, [2, 46]), o($V0, [2, 16], { 12: 27, 27: 36, 43: $V1, 44: $V2 }), o($V0, [2, 14], { 12: 27, 27: 36, 43: $V1, 44: $V2 }), o($V0, [2, 15], { 12: 27, 27: 36, 43: $V1, 44: $V2 }), { 8: [1, 37] }, { 8: [2, 4], 9: [1, 38] }, o($V4, [2, 24]), o($V7, $V8, { 31: 39, 34: 40, 35: 41 }), o($V5, [2, 21]), { 1: [2, 1] }, { 8: [1, 42] }, { 32: [1, 43], 33: [1, 44] }, o($V9, [2, 28]), o($Va, [2, 44], { 36: 45, 38: 46, 40: 48, 43: $Vb, 44: $Vc, 45: $Vd, 50: [1, 47] }), { 1: [2, 2] }, o($V4, [2, 26]), o($V7, $V8, { 35: 41, 34: 52 }), o($V9, [2, 51], { 37: 53, 15: [1, 55], 51: [1, 54], 54: [1, 56] }), o($Ve, [2, 30]), { 12: 27, 27: 57, 43: $V1, 44: $V2 }, o($Vf, [2, 39], { 41: 58, 47: [1, 59], 48: [1, 60], 49: [1, 61] }), o($Vg, [2, 36]), o($Vg, [2, 37]), o($Vh, $V8, { 39: 62, 35: 63 }), o($V9, [2, 27]), o($V9, [2, 29]), o($Vi, $Vj, { 52: 64, 55: 65, 56: $Vk }), o($V9, [2, 49]), o($V9, [2, 50]), o($Va, [2, 43]), o($Ve, [2, 35], { 42: [1, 67] }), o($Vf, [2, 40]), o($Vf, [2, 41]), o($Vf, [2, 42]), { 33: [1, 69], 46: [1, 68] }, o($Vl, [2, 33], { 38: 46, 40: 48, 43: $Vb, 44: $Vc, 45: $Vd }), { 51: $Vm, 53: [1, 70] }, o($Vi, [2, 53], { 56: $Vn }), o($Vo, [2, 56]), o($Ve, [2, 34]), o($Vg, [2, 38]), o($Vh, $V8, { 35: 73 }), o($V9, [2, 48]), o($Vi, $Vj, { 55: 65, 52: 74, 56: $Vk }), o($Vo, [2, 57]), o($Vl, [2, 32], { 38: 46, 40: 48, 43: $Vb, 44: $Vc, 45: $Vd }), { 51: $Vm, 53: [1, 75] }, o($Vi, [2, 55], { 55: 76, 56: $Vk }), o($Vi, [2, 54], { 56: $Vn })];
    }
    performAction(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
        /* this == yyval */
        var $0 = $$.length - 1;
        switch (yystate) {
            case 1:
                this.$ = $$[$0 - 4];
                return extend(this.$, $$[$0 - 2]);
                break;
            case 2:
                this.$ = $$[$0 - 5];
                yy.addDeclaration(this.$, { include: $$[$0 - 1] });
                return extend(this.$, $$[$0 - 3]);
                break;
            case 5:
                this.$ = $$[$0 - 1];
                yy.addDeclaration(this.$, $$[$0]);
                break;
            case 6:
                this.$ = {};
                break;
            case 7:
                this.$ = { start: $$[$0] };
                break;
            case 8:
                this.$ = { lex: $$[$0] };
                break;
            case 9:
                this.$ = { operator: $$[$0] };
                break;
            case 10:
                this.$ = { include: $$[$0] };
                break;
            case 11:
                this.$ = { parseParam: $$[$0] };
                break;
            case 12:
                this.$ = { options: $$[$0] };
                break;
            case 13:
                this.$ = { type: $$[$0] };
                break;
            case 14:
            case 16:
            case 23:
            case 45:
            case 49:
            case 53:
                this.$ = $$[$0];
                break;
            case 15:
                {
                    const t = $$[$0 - 1].substring($$[$0 - 1].indexOf('<') + 1, $$[$0 - 1].lastIndexOf('>'));
                    this.$ = {};
                    for (const token of $$[$0]) {
                        this.$[token] = t;
                    }
                }
                break;
            case 17:
                this.$ = [$$[$0 - 1]];
                this.$.push.apply(this.$, $$[$0]);
                break;
            case 18:
                this.$ = 'left';
                break;
            case 19:
                this.$ = 'right';
                break;
            case 20:
                this.$ = 'nonassoc';
                break;
            case 21:
                this.$ = $$[$0 - 1];
                this.$.push($$[$0]);
                break;
            case 22:
            case 28:
                this.$ = [$$[$0]];
                break;
            case 24:
                this.$ = $$[$0 - 1];
                if ($$[$0][0] in this.$)
                    this.$[$$[$0][0]] = this.$[$$[$0][0]].concat($$[$0][1]);
                else
                    this.$[$$[$0][0]] = $$[$0][1];
                break;
            case 25:
                this.$ = {};
                this.$[$$[$0][0]] = $$[$0][1];
                break;
            case 26:
                this.$ = [$$[$0 - 3], $$[$0 - 1]];
                break;
            case 27:
                this.$ = $$[$0 - 2];
                this.$.push($$[$0]);
                break;
            case 29:
                this.$ = [($$[$0 - 2].length ? $$[$0 - 2].join(' ') : '')];
                if ($$[$0])
                    this.$.push($$[$0]);
                if ($$[$0 - 1])
                    this.$.push($$[$0 - 1]);
                if (this.$.length === 1)
                    this.$ = this.$[0];
                break;
            case 30:
                this.$ = $$[$0 - 1];
                this.$.push($$[$0]);
                break;
            case 31:
                this.$ = [];
                break;
            case 32:
                this.$ = $$[$0 - 2];
                this.$.push($$[$0].join(' '));
                break;
            case 33:
                this.$ = [$$[$0].join(' ')];
                break;
            case 34:
                this.$ = $$[$0 - 2] + $$[$0 - 1] + "[" + $$[$0] + "]";
                break;
            case 35:
                this.$ = $$[$0 - 1] + $$[$0];
                break;
            case 36:
                this.$ = $$[$0];
                break;
            case 37:
                this.$ = ebnf ? "'" + $$[$0] + "'" : $$[$0];
                break;
            case 38:
                this.$ = '(' + $$[$0 - 1].join(' | ') + ')';
                break;
            case 39:
                this.$ = '';
                break;
            case 43:
                this.$ = { prec: $$[$0] };
                break;
            case 44:
                this.$ = null;
                break;
            case 46:
            case 47:
                this.$ = yytext;
                break;
            case 48:
                this.$ = $$[$0 - 1];
                break;
            case 50:
                this.$ = '$$ =' + $$[$0] + ';';
                break;
            case 51:
            case 52:
                this.$ = '';
                break;
            case 54:
                this.$ = $$[$0 - 4] + $$[$0 - 3] + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                break;
            case 55:
                this.$ = $$[$0 - 3] + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                break;
            case 56:
                this.$ = yytext;
                break;
            case 57:
                this.$ = $$[$0 - 1] + $$[$0];
                break;
        }
    }
}
exports.BnfParser = BnfParser;
/* generated by @ts-jison/lexer-generator 0.4.1-alpha.2 */
const lexer_1 = require("@ts-jison/lexer");
class BnfLexer extends lexer_1.JisonLexer {
    constructor(yy = {}) {
        super(yy);
        this.options = { "moduleName": "Bnf" };
        this.rules = [
            /^(?:%%)/,
            /^(?:\()/,
            /^(?:\))/,
            /^(?:\*)/,
            /^(?:\?)/,
            /^(?:\+)/,
            /^(?:\s+)/,
            /^(?:\/\/.*)/,
            /^(?:\/\*(?:.|\n|\r)*?\*\/)/,
            /^(?:\[[a-zA-Z][a-zA-Z0-9_-]*\])/,
            /^(?:[a-zA-Z][a-zA-Z0-9_-]*)/,
            /^(?:"[^"]+")/,
            /^(?:'[^']+')/,
            /^(?::)/,
            /^(?:;)/,
            /^(?:\|)/,
            /^(?:%%)/,
            /^(?:%ebnf\b)/,
            /^(?:%prec\b)/,
            /^(?:%start\b)/,
            /^(?:%left\b)/,
            /^(?:%right\b)/,
            /^(?:%nonassoc\b)/,
            /^(?:%parse-param\b)/,
            /^(?:%options\b)/,
            /^(?:%type[\W]+<[^<>]*(?:<[^<>]*>)*[^<>]*>)/,
            /^(?:[%]lex[\w\W]*?[/]lex\b)/,
            /^(?:%[a-zA-Z]+[^\r\n]*)/,
            /^(?:<[a-zA-Z]*>)/,
            /^(?:\{\{[\w\W]*?\}\})/,
            /^(?:%\{(?:.|\r|\n)*?%\})/,
            /^(?:\{)/,
            /^(?:->.*)/,
            /^(?:.)/,
            /^(?:$)/,
            /^(?:\/\*(?:.|\n|\r)*?\*\/)/,
            /^(?:\/\/.*)/,
            /^(?:\/[^ /]*?['"{}'][^ ]*?\/)/,
            /^(?:"(?:\\\\|\\"|[^"])*")/,
            /^(?:'(?:\\\\|\\'|[^'])*')/,
            /^(?:[/"'][^{}/"']+)/,
            /^(?:[^{}/"']+)/,
            /^(?:\{)/,
            /^(?:\})/,
            /^(?:(?:.|\n|\r)+)/
        ];
        this.conditions = { "bnf": { "rules": [0, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "inclusive": true }, "ebnf": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "inclusive": true }, "action": { "rules": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "inclusive": false }, "code": { "rules": [34, 44], "inclusive": false }, "INITIAL": { "rules": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34], "inclusive": true } };
    }
    performAction(yy, yy_, $avoiding_name_collisions, YY_START) {
        var YYSTATE = YY_START;
        switch ($avoiding_name_collisions) {
            case 0:
                this.pushState('code');
                return 5;
                break;
            case 1:
                return 45;
                break;
            case 2:
                return 46;
                break;
            case 3:
                return 47;
                break;
            case 4:
                return 48;
                break;
            case 5:
                return 49;
                break;
            case 6: /* skip whitespace */
                break;
            case 7: /* skip comment */
                break;
            case 8: /* skip comment */
                break;
            case 9:
                yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
                return 42;
                break;
            case 10:
                return 43;
                break;
            case 11:
                yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
                return 44;
                break;
            case 12:
                yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2);
                return 44;
                break;
            case 13:
                return 30;
                break;
            case 14:
                return 32;
                break;
            case 15:
                return 33;
                break;
            case 16:
                this.pushState(ebnf ? 'ebnf' : 'bnf');
                return 5;
                break;
            case 17:
                if (!yy.options)
                    yy.options = {};
                ebnf = yy.options.ebnf = true;
                break;
            case 18:
                return 50;
                break;
            case 19:
                return 11;
                break;
            case 20:
                return 24;
                break;
            case 21:
                return 25;
                break;
            case 22:
                return 26;
                break;
            case 23:
                return 22;
                break;
            case 24:
                return 19;
                break;
            case 25:
                return 21;
                break;
            case 26:
                return 13;
                break;
            case 27: /* ignore unrecognized decl */
                break;
            case 28: /* ignore type */
                break;
            case 29:
                yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 4);
                return 15;
                break;
            case 30:
                yy_.yytext = yy_.yytext.substr(2, yy_.yytext.length - 4);
                return 15;
                break;
            case 31:
                yy.depth = 0;
                this.pushState('action');
                return 51;
                break;
            case 32:
                yy_.yytext = yy_.yytext.substr(2, yy_.yyleng - 2);
                return 54;
                break;
            case 33: /* ignore bad characters */
                break;
            case 34:
                return 8;
                break;
            case 35:
                return 56;
                break;
            case 36:
                return 56;
                break;
            case 37:
                return 56; // regexp with braces or quotes (and no spaces)
                break;
            case 38:
                return 56;
                break;
            case 39:
                return 56;
                break;
            case 40:
                return 56;
                break;
            case 41:
                return 56;
                break;
            case 42:
                yy.depth++;
                return 51;
                break;
            case 43:
                if (yy.depth == 0)
                    this.begin(ebnf ? 'ebnf' : 'bnf');
                else
                    yy.depth--;
                return 53;
                break;
            case 44:
                return 9;
                break;
        }
    }
}
exports.BnfLexer = BnfLexer;
//# sourceMappingURL=bnf-parser.js.map